import unittest

import pysam

from ..scripts import hypermutation, classify_mutations


class HypermutationTestMixIn(object):
    def setUp(self):
        self.mutation = classify_mutations.MutationLocation(reference='MB2059_pol_H', name='M184I', codon_start1=1310, wt='M', mutations=[])
        self.mutation.mutations.append(classify_mutations.Mutation(self.mutation, 'I'))
        a = pysam.AlignedRead()
        self.reference = 'TAAAAGCATTGGGACCAGCGGCTACATTAGAAGAAATGATGACAGCATGTCAAGGAGTGGGGGGACCTGGTCATAAAGCAAGAGTTTTGGCTGAGGCAATGAGCCAAGTAACAACTGGAAATGCTAATATAATGATGCAGAGAGGCAATTTTCAGAACCGAAAGAAAATCATTAAGTGTTTCAACTGTGGCAAAGAAGGGCACATAGCAAAAAATTGCAAGGCTCCTAGAAAAAGGGGCTGTTGGAAATGTGGAAGGGAAGGACACCAAATGAAAGATTGCACTGAAAGACAGGCTAATTTTTTAGGGAAAATCTGGTCTTCCCCACAAGGGAAGGCCAGGGAACTTCCTTCAGAGCAGACCAGAGCCAACAGCCCCTCCAATAGAGAGCTTCGGGTTTGGGGAGGAGATAACACCCTCTCAGAAACAGGAGCAGACAGACAAGGAGCTGTATCCCTTAGCCTCCCTCAAATCACTCTTTGGCAACGACCCGTCGTCACAGTAAAGGTAGGGGACAGCTAAAGGAAGCTCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATAAATTTGCCAGGAAAATGGAAACCAAAAATGATAGGGGGAATTGGAGGCTTTATCAAAGTAAGACAGTATGATCAAATACTAGTAGAAATCTGTGGACGTAAAGCTATAGGTACAGTATTAGTAGGACCTACACCTGTCAACATAATTGGAAGAAATTTGTTGACTCAAATTGGTTGCACTTTAAATTTTCCAATTAGTCCTATTGAAACTGTACCAGTAAAATTAAAGCCAGGGATGGATGGCCCAAAAGTTAAACAATGGCCGTTGACAGAAGAAAAAATAAGAGCACTAACAGATATTTGTACAGAAATGGAAAAGGAAGGAAAAATTTCAAGAATTGGGCCTGAAAATCCATACAATACTCCAATATTTGCCATAAAGAAGAAAGACAGTACTAAGTGGAGAAAATTAGTAGATTTCAGAGAGCTTAATAAGAGAACTCAAGACTTCTGGGAAGTTCAACTAGGAATACCACATCCTGCAGGGCTAAAAAAGAAAAAATCAGTAACAGTACTGGATGTGGGTGATGCATACTTTTCAGTTCCCTTATATGAAGAATTTAGAAAATACACCGCATTCACCATACCTAGTATAAACAATGAGACACCAGGGATTAGATATCAGTACAATGTGCTTCCACAAGGATGGAAAGGATCACCGGCAGTATTCCAAAGTAGCATGACAAAAATCTTAGAACCTTTTAGAAAACAAAATCCAGAAATGGTTATCTATCAATACATGGATGATTTGTATGTAGGATCTGACTTAGAAATAGGGCAGCATAGAATAAAAATAGAGGAATTAAGGGGACACCTATTGAAGTGGGGATTTACCACACCAGACAAAAAGCATCAGAAAGAACCACCATTTCTTTGGATGGGTTATGAACTCCATCCTGATAAATGGACAGTACAGCCTATAAAGCTGCCAGAAAAAGAAAGCTGGACTGTCAATGATATACAGAAGCTAGTGGGGAAATTAAATTGGGCAAGCCAGATTTATCCAGGAATTAGAGTAAGACAATTATGCAAATGCCTTAGGGGAGCTAAAGCACTGACAGAAGTAGTACCACTGACAGAAGAAGCAGAGTTAGAACTGGCAGAAAACAGGGAAATTCTAAAGGAACCAGTACATGGAGTATATTATGACCCAGCAAAAGACTTAATAGCAGAAATACAGAAACTAAGGCAAGAAAAATGGACATATCAAATTTTTCAAGAACAATACAAAAATCTGAAAACAGGAAAGTATGCAAAAATGAGGGGTACCCACACTAATGATGTAAAACAATTAACAGAGGCAGTGCAAAAAGTAGCCCAAGAATGTATAGTCATATGGGGAAAGACTCCTAAATTTAGACTACCTATACAAAAGGAAACATGGGAAACATGGTGGGCAGAGTATTGGCAGGCCACCTGGATTCCTGAGTGGGAGTTTGTCAATACCCCTCCTTTAGTTAAATTATGGTACCAGTTAGAGAAGGAACCCATAATAGGAGCAGAAACTTTCTATGTAGATGGGGCAGCTAATAGAGAAACTAAATTAGGAAAAGCAGGATATATTACTGACAGAGGAAGACAGAAAGTTGTCTCTCTAACTGACACAACAAATCAGAAGACTGAATTACAAGCCATTAATCTAGCTTTACAGGATTCAGGAGTAGAAGTAAACATAGTGACAGACTCACAATATGCATTAGGAATCATTCAAGCACAACCAGATAAAAGTGAGTCAGAGTTAGTCAATCAAATAATAGAGCAGTTAATAAAAAAGGAAAAGGTCTACCTATCATGGGTACCAGCACACAAGGGGATTGGAGGAAATGAACAAGTAGATAAATTAGTCAGCAATGGAATCAGAAAAATATTATTCTTAGATGGGATAGATAAGGCTCAAGAAGAACATGAGAAATACCACAACAATTGGAGAGCAATGGCTAGTGATTTTAACCTGCCACCTGTGGTAGCAAAAGAAATAGTAGCTAGCTGTGATAAATGTCAGCTAAAAGGAGAAGCCTTGCATGGACAAGTAGACTGTAGTCCAGGTATATGGCAATTAGATTGTACACATTTAGAAGGAAAAGTTATCCTGGTAGCAGTCCATGTAGCCAGTGGCTATATAGAAGCGGAAGTTATTCCAGCAGAAACAGGGCAGGAAACAGCCTACTTTCTCTTGAAATTAGCAGGAAGATGGCCAGTAAAAGTAGTACATACAGACAATGGCAGCAATTTCACCAGTGCTGCAGTTAAGGCTGCCTGTTGGTGGGCAGGCATCAAACAGGAATTTGGAATTCCCTACAATCCCCAAAGTCAAGGGGTAGTAGAATCTATGAATAAAGAATTAAAGAAGATTATAGGACAGGTAAGAGACCAAGCTGAACATCTTAAGACAGCAGTACAAATGGCAGTATTCATCCACAATTTTAAAAGAAAAGGGGGGATTGGGGGGTACAGTGCAGGGGAAAGAATAATAGACATAATAGCAACAGACATACAAACTAAAGAATTACAAAAACAAATCATAAAAATTCAAAATTTTCGGGTTTATTACAGGGACAGCAGAGATCCAATTTGGAAAGGACCAGCAAAACTTCTCTGGAAAGGTGAAGGGGCAGTAGTAATACAAGACAATAGTGAAATAAAGGTAGTACCAAGAAGAAAGGTAAAGATCATTAGGGATTATGGAAAACAGATGGCAGGTGATGATTGTGTGGCAAGTAGACAGGATGAGGATTAGACAATGGAAGAGTTTAGTAAAACATCATATGTATGTTTCAAAGAGAGCTCAAGGATGGCTGTATAGACATCACTATGAATGCCCAAATCCAAAAACAAGTTCAGAAGTACACATCCCACTAGGAGAAGCTAGACTGGTAGTAAAAACATATTGGGGTCTGCATACAGGAGAAAGAGAATGGCATCTGGGTCAGGGAGTCTCCATAGAATGGAGGAAAAGGAGATATAGCACACAAGTAGACCCTGGCCTGGCAGACCAACTAATTCATATACATTATTTTGATTGTTTTGCAGAATCTGCTATAAGGAAAGCCATATTAGGACATATAGTTACTCCTAGGTGTAATTATCAAGCAGGACATAACAAGGTAGGATCTTTACAATATTTGGCACTAACAGCATTGTTAACACCAAAAAAGA'
        a.qname = 'H3QYW4L01BXE8C'
        a.seq = 'ACCAACTAATTTAGTCCGACTAAAGAAAGAAAAGAAACGAAGTACGTAAAGTTAGGTAGGAAAAAGTTAAAAGTTAAGGTAAGTTTACTTACGAAGGAAGACCGTTAATTAAAGTAAGGAACGTACTAACGAACGTTACTTCGGGAAGGTTACGTAACTAACGGAAGTAACCACCATACCTCGCAGGACGTAAAAGAAACAAAATCAGTAACAGTACTGGATGTGGGTGATGCATACTTTTCAGTTCCCTTATATGAAGAATTTAGAAAATACACCGCATTCACCATACCTAGTATAAACAATGAGACACCAGGGATTAGATATCAGTACAATGTGCTTCCACAAGGATGGAAAGGATCACCGGCAGTATTCCAAAGTAGCATGACGAAAATCTTAGAACCTTTTAGAAAACAAAATCCAGAAATGGTTATCTATCAATACATGGATGATTTGTATGTAGGATCTGACTTAGAAATAGGGCAGCATAGAATAAAAATAGAGGAATTAAGGGGACACCTATTGAAGTGGAGATTTACCACACCAGACAAAAAGCATCAGAAAGAACCACCATTT'
        a.cigar = [(4, 66), (0, 16), (2, 2), (0, 3), (2, 3), (0, 6), (2, 6), (0, 15), (2, 3), (0, 11), (2, 1), (0, 30), (1, 3), (0, 15), (2, 9), (0, 32), (1, 1), (0, 375)]
        a.pos = 914
        a.qual = ''.join(chr(40 + 33) for _ in a.seq)

        self.read = a


class ListGToATestCase(HypermutationTestMixIn, unittest.TestCase):
    def test_low_qual(self):
        a = self.read

        a.qual = ''.join(chr(19 + 33) for _ in a.seq)
        result = hypermutation.list_g_to_a(a, self.reference, self.mutation, 20)
        self.assertDictEqual({'g_prop_mutated': None,
                              'qry_g': 0,
                              'ref_g': 0,
                              'qry_a': 0}, result)

    def test_ok(self):
        result = hypermutation.list_g_to_a(self.read, self.reference, self.mutation, 20)
        self.assertDictEqual({'g_prop_mutated': 13. / 100.,
                              'qry_g': 83,
                              'ref_g': 100,
                              'qry_a': 13}, result)


class ListGGToAGTestCase(HypermutationTestMixIn, unittest.TestCase):
    def test_low_qual(self):
        a = self.read

        a.qual = ''.join(chr(19 + 33) for _ in a.seq)
        result = hypermutation.list_gg_to_ag(a, self.reference, self.mutation,
                                             20)
        self.assertDictEqual({'gg_prop_mutated': None,
                              'qry_gg': 0,
                              'ref_gg': 0,
                              'qry_ag': 0}, result)

    def test_ok(self):
        result = hypermutation.list_gg_to_ag(self.read, self.reference,
                                             self.mutation, 20)
        self.assertDictEqual({'gg_prop_mutated': 1/26.,
                              'qry_gg': 20,
                              'ref_gg': 26,
                              'qry_ag': 1}, result)


def suite():
    suite = unittest.TestSuite()
    for c in [ListGToATestCase, ListGGToAGTestCase]:
        suite.addTest(unittest.makeSuite(c))
    return suite
